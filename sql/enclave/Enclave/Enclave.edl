// -*- mode: c++ -*-
/* Enclave.edl - Top EDL file. */

enclave {
    
  include "user_types.h" /* buffer_t */
  include "stdbool.h"
  //include "jni.h"
  //include "jni_md.h"
  //include "define.h"

  /* Import ECALL/OCALL from sub-directory EDLs.
   *  [from]: specifies the location of EDL file.
   *  [import]: specifies the functions to import,
   *  [*]: implies to import all functions.
   */

  from "Edger8rSyntax/Types.edl" import *;
  from "Edger8rSyntax/Pointers.edl" import *;
  from "Edger8rSyntax/Arrays.edl" import *;
  from "Edger8rSyntax/Functions.edl" import *;

  from "TrustedLibrary/Libc.edl" import *;
  from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
  from "TrustedLibrary/Thread.edl" import *;

  /*
   * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
   *  [in]: copy the string buffer to App outside.
   *  [string]: specifies 'str' is a NULL terminated buffer.
   */
  trusted {
    public void ecall_project(
      int op_code,
      [user_check] uint8_t *input_rows,
      uint32_t input_rows_length,
      uint32_t num_rows,
      [user_check] uint8_t *output_rows,
      uint32_t output_rows_length,
      [out] uint32_t *actual_output_rows_length);
    public void ecall_filter(
      int op_code,
      [user_check] uint8_t *input_rows,
      uint32_t input_rows_length,
      uint32_t num_rows,
      [user_check] uint8_t *output_rows,
      uint32_t output_rows_length,
      [out] uint32_t *actual_output_rows_length,
      [out] uint32_t *num_output_rows);
    public void ecall_encrypt(
      [user_check] uint8_t *plaintext,
      uint32_t length,
      [user_check] uint8_t *ciphertext,
      uint32_t cipher_length);
    public void ecall_decrypt(
      [in, size=ciphertext_length] uint8_t *ciphertext,
      uint32_t ciphertext_length,
      [out, size=plaintext_length] uint8_t *plaintext,
      uint32_t plaintext_length);
    public void ecall_test_int([in, size=1] int *ptr);

    public void ecall_external_oblivious_sort(
      int op_code,
      uint32_t num_buffers,
      [user_check] uint8_t **buffer_list,
      [in, count=num_buffers] uint32_t *num_rows,
      uint32_t row_upper_bound);

    public void ecall_aggregate_step1(
      int op_code,
      [user_check] uint8_t *input_rows, uint32_t input_rows_length, uint32_t num_rows,
      [user_check] uint8_t *output_rows, uint32_t output_rows_length,
      [out] uint32_t *actual_size);
    public void ecall_process_boundary_records(
      int op_code,
      [in, size=rows_size] uint8_t *rows, uint32_t rows_size,
      uint32_t num_rows,
      [out, size=out_agg_row_size] uint8_t *out_agg_rows, uint32_t out_agg_row_size,
      [out, size=4] uint32_t *actual_out_agg_row_size);
    public void ecall_aggregate_step2(
      int op_code,
      [user_check] uint8_t *input_rows, uint32_t input_rows_length, uint32_t num_rows,
      [in, size=boundary_info_row_length] uint8_t *boundary_info_row_ptr,
      uint32_t boundary_info_row_length,
      [user_check] uint8_t *output_rows, uint32_t output_rows_length,
      [out] uint32_t *actual_size);
    public void ecall_stream_encryption_test();

    public void ecall_scan_collect_last_primary(
      int op_code,
      [user_check] uint8_t *input_rows, uint32_t input_rows_length,
      uint32_t num_rows,
      [out, size=output_length] uint8_t *output, uint32_t output_length,
      [out] uint32_t *actual_output_len);

    public void ecall_process_join_boundary(
      int op_code,
      [user_check] uint8_t *input_rows, uint32_t input_rows_length,
      uint32_t num_rows,
      [user_check] uint8_t *output_rows, uint32_t output_rows_size,
      [out, size=4] uint32_t *actual_output_length);

    public void ecall_sort_merge_join(
      int op_code,
      [user_check] uint8_t *input_rows, uint32_t input_rows_length,
      uint32_t num_rows,
      [user_check] uint8_t *join_row, uint32_t join_row_length,
      [user_check] uint8_t *output_rows, uint32_t output_rows_length,
      [out, size=4] uint32_t *actual_output_length);

    public void ecall_join_sort_preprocess(
      int op_code,
      [user_check] uint8_t *primary_rows, uint32_t primary_rows_len, uint32_t num_primary_rows,
      [user_check] uint8_t *foreign_rows, uint32_t foreign_rows_len, uint32_t num_foreign_rows,
      [user_check] uint8_t *output_rows, uint32_t output_rows_len,
      [out] uint32_t *actual_output_len);

    public void ecall_encrypt_attribute(
      [in, size=input_size] uint8_t *input, uint32_t input_size,
      [out, size=output_size] uint8_t *output, uint32_t output_size,
      [out] uint32_t *actual_size);

    public void ecall_create_block(
      [user_check] uint8_t *rows, uint32_t rows_len, uint32_t num_rows,
      bool rows_are_join_rows, [user_check] uint8_t *block, uint32_t block_len,
      [out] uint32_t *actual_size);

    public void ecall_split_block(
      [user_check] uint8_t *block, uint32_t block_len,
      [user_check] uint8_t *rows, uint32_t rows_len, uint32_t num_rows,
      bool rows_are_join_rows, [out] uint32_t *actual_size);

    public void ecall_generate_random_encrypted_block(uint32_t num_cols,
													  [in, count=num_cols] uint8_t *column_types,
													  uint32_t num_rows,
													  [user_check] uint8_t *output_buffer,
													  [out] uint32_t *encrypted_buffer_size,
													  uint8_t type);
																							
    public void ecall_row_parser([user_check] uint8_t *enc_block);
	public void ecall_external_sort(int op_code,
									uint32_t num_buffers,
									[user_check] uint8_t **buffer_list,
									[user_check] uint32_t *num_rows,
									uint32_t row_upper_bound,
									[user_check] uint8_t *scratch);

																  
    public void ecall_sample(int op_code,
							 [user_check] uint8_t *input_rows,
							 [user_check] uint8_t *output_rows,
							 [out] uint32_t *output_rows_len);

	public void ecall_find_range_bounds(int op_code,
										uint32_t num_bufs,
										[user_check] uint8_t *input_rows,
										uint32_t input_rows_len,
										[user_check] uint8_t *scratch,
										[user_check] uint8_t *output_rows,
										[out] uint32_t *output_rows_len);

	public void ecall_sort_partition(int op_code,
									 uint32_t num_bufs,
									 [user_check] uint8_t *input_rows,
									 uint32_t input_rows_len,
									 [user_check] uint8_t *boundary_rows,
									 uint8_t num_partitions,
									 [user_check] uint8_t *output,
									 [user_check] uint8_t **output_stream_list,
									 [user_check] uint8_t *scratch);

    public void ecall_non_oblivious_aggregate(int op_code,
											  [user_check] uint8_t *input_rows, uint32_t input_rows_length,
											  uint32_t num_rows,
											  [user_check] uint8_t *output_rows, uint32_t output_rows_length,
											  [out] uint32_t *actual_size);


	public void non_oblivious_sort_merge_join(int op_code,
											  [user_check] uint8_t *input_rows, uint32_t input_rows_length,
											  uint32_t num_rows,
											  [user_check] uint8_t *output_rows, uint32_t output_rows_length,
											  [out] uint32_t *actual_output_length);
																				   
	public void ecall_non_oblivious_sort_merge_join(int op_code,
													[user_check] uint8_t *input_rows, uint32_t input_rows_length,
													uint32_t num_rows,
													[user_check] uint8_t *output_rows, uint32_t output_rows_length,
													[out] uint32_t *actual_output_length);

  };

  untrusted {
    void ocall_print_string([in, string] const char *str);
  };

};

* Sort-based aggregate

https://goo.gl/photos/7E4yyEoHFq6Fis65A

1. Global column sort

2. Oblivious count-distinct for padding, plus calculate the global offset for
   each distinct element

   For global count-distinct, compute local count-distinct, plus first and last
   elements in each partition. The coordinator uses these to compensate for
   runs of records that span partition boundaries.

   Compact numbering can be calculated from this result.

   Also track the partial sum for the last record of each partition

3. If the number of distinct elements is greater than a threshold (e.g., the
   partition size), use high-cardinality algorithm.

** low-cardinality

4. Map-side aggregate + pad

   Use the compact numbering from above to ensure the partial aggregrates are
   output in sorted order and at the correct offset

5. Colocate matching partial aggregates using any group-by operator (not
   necessarily oblivious)

6. Reduce-side final aggregate

** high-cardinality

4. Perform local aggregation, augmenting the partial sum for the first element
   using the partial sum from the last element of the previous partition

5. Suppress duplicate partial sums from previous partitions using the last
   element of each partition

6. Global sort, where suppressed partial sums are sorted last and finally
   dropped
